N	name	tag name(fixed field)	format-char	on
F	input	input file(fixed field)	format-char	on
P	pattern	pattern(fixed field)	format-char	on
C	compact	compact input line(fixed field, only used in -x option)	format-char	off
a	access	Access (or export) of class members	format-char	off
f	file	File-restricted scoping	format-char	on
i	inherits	Inheritance information	format-char	off
K	NONE	Kind of tag as full name	format-char	off
k	NONE	Kind of tag as a single letter	format-char	on
l	language	Language of input file containing tag	format-char	off
m	implementation	Implementation information	format-char	off
n	line	Line number of tag definition	format-char	off
r	role	role	format-char	off
R	NONE	Marker(R or D) representing whether tag is definition or reference	format-char	off
S	signature	Signature of routine (e.g. prototype or parameter list)	format-char	off
s	NONE	Scope of tag definition(WARNING: this doesn't work well as a format letter)	format-char	on
t	typeref	Type and name of a variable or typedef	format-char	on
z	kind	Include the "kind:" key in kind field(use k or K)	NONE	off
Z	scope	Include the "scope:" key in scope field(use s)	NONE	off
#
Foo	input.java	/^abstract public class Foo extends Bar$/
x	input.java	/^    public int x;$/
#a
Foo	input.java	/^abstract public class Foo extends Bar$/
x	input.java	/^    public int x;$/;"	access:public
#i
Foo	input.java	/^abstract public class Foo extends Bar$/;"	inherits:Bar
x	input.java	/^    public int x;$/
#kz
Foo	input.java	/^abstract public class Foo extends Bar$/;"	kind:c
x	input.java	/^    public int x;$/;"	kind:f
#Kz
Foo	input.java	/^abstract public class Foo extends Bar$/;"	kind:class
x	input.java	/^    public int x;$/;"	kind:field
#k
Foo	input.java	/^abstract public class Foo extends Bar$/;"	c
x	input.java	/^    public int x;$/;"	f
#K
Foo	input.java	/^abstract public class Foo extends Bar$/;"	class
x	input.java	/^    public int x;$/;"	field
#l
Foo	input.java	/^abstract public class Foo extends Bar$/;"	language:Java
x	input.java	/^    public int x;$/;"	language:Java
#m
Foo	input.java	/^abstract public class Foo extends Bar$/;"	implementation:abstract
x	input.java	/^    public int x;$/
#n
Foo	input.java	/^abstract public class Foo extends Bar$/;"	line:1
x	input.java	/^    public int x;$/;"	line:3
#s
Foo	input.java	/^abstract public class Foo extends Bar$/
x	input.java	/^    public int x;$/;"	class:Foo
#sZ
Foo	input.java	/^abstract public class Foo extends Bar$/
x	input.java	/^    public int x;$/;"	scope:class:Foo
#f
X	input.c	/^struct X {$/;"	file:
Y	input.c	/^struct Y {$/;"	file:
i	input.c	/^  int i;$/;"	file:
j	input.c	/^  int j;$/;"	file:
main	input.c	/^int main(void)$/
x	input.c	/^  struct X x;$/;"	file:
#S
X	input.c	/^struct X {$/
Y	input.c	/^struct Y {$/
i	input.c	/^  int i;$/
j	input.c	/^  int j;$/
main	input.c	/^int main(void)$/;"	signature:(void)
x	input.c	/^  struct X x;$/
#t
X	input.c	/^struct X {$/
Y	input.c	/^struct Y {$/
i	input.c	/^  int i;$/
j	input.c	/^  int j;$/
main	input.c	/^int main(void)$/
x	input.c	/^  struct X x;$/;"	typeref:struct:Y::X
#r
x	input.sh	/^source x$/;"	role:generic
y	input.sh	/^function y()$/
#r
D/
R/generic
